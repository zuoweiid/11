#============================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: 电视盒子编译+IMG打包
#============================================================================================

name: 电视盒子编译+IMG打包     ## Actions工作流的名称

on:
  repository_dispatch:         ## 存储库_调度
  workflow_dispatch:           ## 工作流程_调度
    inputs:
    
      source_branch:
        description: "选择源码"  # Select the source branch
        required: false
        default: "openwrt-main"     # 默认选择官方源码
        type: choice                # 类型：选择
        options:                    # 源码的选项，选项在：config/源码文件夹/config
          - openwrt-main
          - lede-master
          - immortalwrt-master
          - Lienol-master
          
          
      openwrt_board:
        description: "盒子的CPU架构型号"    # Select device board
        required: false
        default: "all"             # 默认全选设备
        type: choice               # 类型：选择
        options:
          - all
          - s905x-t95_s912-t95z-plus_s905l3-unt400g1_tanix-tx6
          - s912_s912-m8s-pro_s922x_s922x-ct2000_s922x-reva
          - smart-am40_station-m1_sw799_tn3399_vplus_zysj
          - s905d
          - s905d-ki-pro
          - s905d-sml5442tw
          - s905x
          - s905x-tx9
          - s905x-t95
          - s905x-b860h
          - s905x-tbee
          - s905w
          - s905w-w95
          - s905w-x96w
          - s905w-x96-mini
          - s905l
          - s905l2
          - s905l2-wojia
          - s905l2-e900v21e
          - s905l3
          - s905l3-cm211
          - s905l3-unt400g1
          - s905l3a
          - s905l3a-cm311
          - s905l3a-m401a
          - s905l3b
          - s905l3b-e900v22e
          - s905l3b-e900v22d
          - s905l3b-ip103h
          - s905lb-q96-mini
          - s905lb-r3300l
          - s912
          - s912-zyxq-fake
          - s912-h96pro-plus
          - s912-m8s-pro
          - s912-t95z-plus
          - s912-tx9-pro-3g
          - s912-tx9-pro-2g
          - s912-nexbox-a1
          - s912-nexbox-a2
          - s912-tx8-max
          - s912-x92
          - s912-phicomm-t1
          - s905x2
          - s905x2-x96max-2g
          - s905x2-km3
          - a311d
          - s922x
          - s922x-gtking
          - s922x-gtkingpro-h
          - s922x-reva
          - s922x-odroid-n2
          - s922x-ugoos-am6
          - s922x-ct2000
          - s905x3
          - s905x3-hk1
          - s905x3-x96max
          - s905x3-h96max
          - s905x3-ugoosx3
          - s905x3-tx3
          - s905x3-tx3-bz
          - s905x3-a95xf3
          - s905x3-a95xf3-gb
          - s905x3-x96air
          - s905x3-x96air-gb
          - s905x3-ip1001m
          - s905x3-q1
          - s905x3-q2
          - s905x3-a100
          - s905x3-2101
          - s905x3-whale
          - s905x3-b
          - s905
          - s905-mxqpro-plus
          - s905-beelink-mini
          - rock5b
          - h88k
          - ipc-r
          - r66s
          - r68s
          - h66k
          - h68k
          - h69k
          - e25
          - nanopi-r5s
          - panther-x2
          - eaidk-610
          - king3399
          - tn3399
          - kylin3399
          - hugsun-zm
          - crrc
          - smart-am40
          - sw799
          - zysj
          - dg3399
          - dlfr100
          - emb3531
          - leez
          - beikeyun
          - l1pro
          - station-m1
          - vplus
          - tanix-tx6
          
          
      openwrt_kernel:
        description: "内核版本"          # Select kernel version
        required: false
        default: "5.15.1_6.1.1"
        type: choice
        options:
          - 5.4.1_5.10.1
          - 5.15.1_6.1.1
          - 5.4.1
          - 5.10.1
          - 5.15.1
          - 6.1.1
          
          
      auto_kernel:
        description: "自动使用最新内核"   # Auto use the latest kernel
        required: false
        default: true
        type: boolean
        
        
      kernel_repo:
        description: "设置内核储存库"     # Set the kernel repository
        required: false
        default: "ophub/kernel"
        type: choice
        options:
          - ophub/kernel
          
          
      kernel_usage:
        description: "固件打包方式."   # Set the tags of the stable kernel
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - beta
          
          
      openwrt_storage:
        description: "选择图像存储类型."    # Select image storage type
        required: false
        default: "save"
        type: choice
        options:
          - save
          - temp
          
          
      builder_name:
        description: "设置 OpenWrt 构建器签名."    # Set OpenWrt builder signature
        required: false
        default: "angel"
        type: choice
        options:
          - angel
          - yourname



env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default              # = feeds.conf.default的变量
  CONFIG_FILE: config/${{ inputs.source_branch }}/config                         # = config的变量
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh                     # = diy-part1.sh的变量
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh                     # = diy-part2.sh的变量
  TZ: America/New_York                                                           # = 时区 美洲/纽约

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: 准备环境    # Checkout
        uses: actions/checkout@v3

      - name: 安装编译环境    # Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 下载 [ ${{ inputs.source_branch }} ]源码
        id: codes
        working-directory: /workdir                                             # 设置执行工作目录
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          
          if [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then         # 下载官方源码
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="official"
              
          elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then          # 下载Lede源码
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              TAGS_NAME="lede"
              
          elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then      # 下载immortalwrt源码
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
              
          elif [[ "${{ inputs.source_branch }}" == *"Lienol"* ]]; then           # 下载Lienol源码
              REPO_URL="https://github.com/Lienol/openwrt"
              REPO_BRANCH="22.03"
              TAGS_NAME="Lienol"
          else
              echo "未知的源代码存储库."
              exit 1
          fi


          # 下载源代码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt


          # 设置输出信息
          echo "build_tag=OpenWrt_${TAGS_NAME}_${{ inputs.openwrt_storage }}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}


      - name: 加载DIY_P1_SH
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}


      - name: 更新源插件
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: 安装源插件
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: 加载DIY_P2_SH
        run: |
          [[ -d "files" ]] && mv -f files openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: 下载DL库
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 开始编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) thread compile"
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 整理空间
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          # Clean up server space
          cd openwrt/
          mkdir output
          cp -f bin/targets/*/*/*rootfs.tar.gz output/
          cp -f .config output/config
          rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null

          # 生成sha256sum文件
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done

          # 设置输出信息
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 上传OpenWrt发布
        uses: ncipollo/release-action@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}

      - name: 打包 OpenWrt
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: openwrt/output/*rootfs.tar.gz
          openwrt_board: ${{ inputs.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}
          builder_name: ${{ inputs.builder_name }}
          gh_token: ${{ secrets.GH_TOKEN }}

      - name: 上传打包好的OpenWrt
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### OpenWrt Image information
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: password
            - Default WIFI name: OpenWrt
            - Default WIFI password: none
            ### Install to EMMC
            - Login to OpenWrt → System → Amlogic Service → Install OpenWrt
            ### OpenWrt Image Verification
            - sha256sum
